"use server"

interface EventNotificationData {
  title: string
  date: string
  startTime: string
  reminderMinutes: number
  chatId?: string
  description?: string
  location?: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId: string, message: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN

  if (!botToken) {
    throw new Error("TELEGRAM_BOT_TOKEN not configured")
  }

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`

  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      parse_mode: "HTML",
    }),
  })

  if (!response.ok) {
    const error = await response.text()
    throw new Error(`Failed to send Telegram message: ${error}`)
  }

  return response.json()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
export async function sendEventNotification(eventData: EventNotificationData) {
  try {
    if (!eventData.chatId) {
      console.log("No Telegram chat ID provided, skipping notification")
      return { success: false, message: "No chat ID provided" }
    }

    const eventDateTime = new Date(`${eventData.date}T${eventData.startTime}`)
    const reminderTime = new Date(eventDateTime.getTime() - eventData.reminderMinutes * 60 * 1000)

    const message = `
üîî <b>Event Reminder</b>

üìÖ <b>${eventData.title}</b>

üóì <b>Date:</b> ${new Date(eventData.date).toLocaleDateString("en-US", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    })}
‚è∞ <b>Time:</b> ${eventData.startTime}
${eventData.location ? `üìç <b>Location:</b> ${eventData.location}` : ""}
${eventData.description ? `üìù <b>Description:</b> ${eventData.description}` : ""}

‚è± <i>Reminder sent ${eventData.reminderMinutes} minutes before the event</i>
    `.trim()

    await sendTelegramMessage(eventData.chatId, message)

    console.log("Telegram notification sent successfully:", {
      eventTitle: eventData.title,
      eventTime: eventDateTime.toISOString(),
      reminderTime: reminderTime.toISOString(),
      chatId: eventData.chatId,
    })

    return { success: true, message: "Telegram notification sent successfully" }
  } catch (error) {
    console.error("Failed to send Telegram notification:", error)
    throw new Error("Failed to send Telegram notification")
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
export async function sendEventCreationConfirmation(eventData: EventNotificationData) {
  try {
    if (!eventData.chatId) {
      console.log("No Telegram chat ID provided, skipping confirmation")
      return { success: false, message: "No chat ID provided" }
    }

    const message = `
‚úÖ <b>Event Created Successfully!</b>

üìÖ <b>${eventData.title}</b>

üóì <b>Date:</b> ${new Date(eventData.date).toLocaleDateString("en-US", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    })}
‚è∞ <b>Time:</b> ${eventData.startTime}
${eventData.location ? `üìç <b>Location:</b> ${eventData.location}` : ""}
${eventData.description ? `üìù <b>Description:</b> ${eventData.description}` : ""}

${eventData.reminderMinutes > 0 ? `üîî <i>You will receive a reminder ${eventData.reminderMinutes} minutes before the event</i>` : ""}
    `.trim()

    await sendTelegramMessage(eventData.chatId, message)

    console.log("Telegram confirmation sent successfully:", eventData.title)

    return { success: true, message: "Telegram confirmation sent" }
  } catch (error) {
    console.error("Failed to send Telegram confirmation:", error)
    throw new Error("Failed to send Telegram confirmation")
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
export async function getBotInfo() {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN

    if (!botToken) {
      throw new Error("TELEGRAM_BOT_TOKEN not configured")
    }

    const url = `https://api.telegram.org/bot${botToken}/getMe`
    const response = await fetch(url)

    if (!response.ok) {
      throw new Error("Failed to get bot info")
    }

    const data = await response.json()
    return { success: true, bot: data.result }
  } catch (error) {
    console.error("Failed to get bot info:", error)
    return { success: false, error: error.message }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ cron job –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
export async function scheduleEventReminders() {
  try {
    console.log("Checking for events that need Telegram reminders...")

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    // –Ω–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ Telegram

    return { success: true }
  } catch (error) {
    console.error("Failed to schedule Telegram reminders:", error)
    throw new Error("Failed to schedule Telegram reminders")
  }
}
